Description: >
    NomanIkram-CfnAssignment-Nested-Stack-Database-Configuration

Parameters:
  ProjectName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "NomanIkram-Cfn-Assignment"

  Environnment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "Dev"


  InstanceAMI:
    Description: AMI used for the Setting up MySql
    Type: String
    Default: "ami-0ee02acd56a52998e"

  EC2InstanceType:
    Description: InstanceType used for the Setting up MySql
    Type: String
    Default: "t2.micro"

  SSHKey:
    Description: Secret Key Name
    Type: String
    Default: "nomanikram-secretkey"

  PrivateSubnet1c:
    Description: PrivateSubnet1c
    Type: String
    Default: "default"

  MySQLSG:
    Description: MySQLSG
    Type: String
    Default: "default"

  FlaskAppSG:
    Description: FlaskAppSG
    Type: String
    Default: "default"

Resources:

  MySQLInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref InstanceAMI
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref SSHKey
      SubnetId: #!Ref PrivateSubnet1c
        Fn::ImportValue:
          PrivateSubnet1c
      SecurityGroupIds:
        - Fn::ImportValue:
            MySQLSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          DBName='demo'
          DBUser='nomanikram'
          DBPassword='secret'
          DBRootPassword='rsecret'
          apt update -y
          apt install -y mariadb-server # wget
          service mysql start
          mysqladmin -u root password $DBRootPassword
          mysql -u root --password=$DBRootPassword
          echo "CREATE DATABASE $DBName;" >> /tmp/db.setup
          echo "CREATE USER '$DBUser'@'%' IDENTIFIED BY '$DBPassword';" >> /tmp/db.setup
          echo "GRANT ALL ON $DBName.* TO '$DBUser'@'%';" >> /tmp/db.setup
          echo "FLUSH PRIVILEGES;" >> /tmp/db.setup
          mysql -u root --password=$DBRootPassword < /tmp/db.setup
          sed -i "s/.*bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mariadb.conf.d/50-server.cnf
          service mysql restart
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environnment}-EC2-MySqlDB'

  FlaskAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: launchtemplate
      LaunchTemplateData:
        ImageId: !Ref InstanceAMI
        InstanceType: !Ref EC2InstanceType
        KeyName: !Ref SSHKey
        SecurityGroupIds:
          #- Ref: FlaskAppSG
          - Fn::ImportValue:
              FlaskAppSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            export DB_HOST="${MySQLInstance.PrivateIp}"
            add-apt-repository ppa:deadsnakes/ppa -y
            apt update -y
            git clone https://github.com/iNomanIkram/demo_flask_mariadb
            apt update
            apt install python3.9 -y
            cd demo_flask_mariadb
            apt-get install python3.9-venv -y
            python3.9 -m venv venv
            curl  https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py
            python3.9 get-pip.py
            source venv/bin/activate
            python3.9 -m pip install --upgrade pip
            pip install flask flask-restful mysql-connector-python
            python3.9 app.py

Outputs:
  MySQLInstance:
    Description: MySql EC2 Instance Ref
    Value: !Ref MySQLInstance
    Export:
      Name: MySQLInstance

  FlaskAppLaunchTemplate:
    Description: Launch Template For ASG
    Value: !Ref FlaskAppLaunchTemplate
    Export:
      Name: FlaskAppLaunchTemplate

  LaunchTemplateVersion:
    Description: Launch Template Version Required For ASG
    Value: !GetAtt FlaskAppLaunchTemplate.LatestVersionNumber
    Export:
      Name: LaunchTemplateVersion

  MySQLInstancePrivateIp:
    Description: Security Group For Database
    Value:
      Fn::GetAtt:
       - MySQLInstance
       - PrivateIp
    Export:
      Name: MySQLInstancePrivateIp
