Description: >
    NomanIkram-CfnAssignment-Nested-Stack-SG-Configuration

Parameters:
  ProjectName:
      Description: An environment name that will be prefixed to resource names
      Type: String
      Default: "NomanIkram-Cfn-Assignment"

  Environnment:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "Dev"

Resources:
    MySQLSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow incoming request on port 3306/22 from web security group
        VpcId: #!Ref VPC
          Fn::ImportValue:
            VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref FlaskAppSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref FlaskAppSG
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub '${ProjectName}-${Environnment}-SecurityGroup-MySQLDatabase'

    FlaskAppSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId: #!Ref VPC
          Fn::ImportValue:
            VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LoadBalancerSG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref BastionHostSG
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionHostSG
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub '${ProjectName}-${Environnment}-SecurityGroup-FlaskApp'

    LoadBalancerSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts
        VpcId: #!Ref VPC
          Fn::ImportValue:
            VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub '${ProjectName}-${Environnment}-SecurityGroup-LoadBalancer'

    BastionHostSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http requests to our hosts and SSH from local only
        VpcId: #!Ref VPC
          Fn::ImportValue:
            VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub '${ProjectName}-${Environnment}-SecurityGroup-BastionHost'

Outputs:
  MySQLSG:
    Description: Security Group For Database
    Value: !Ref MySQLSG
    Export:
      Name: MySQLSG
  FlaskAppSG:
    Description: Security Group For FlaskApp
    Value: !Ref FlaskAppSG
    Export:
      Name: FlaskAppSG
  LoadBalancerSG:
    Description: Security Group For LoadBalancer
    Value: !Ref LoadBalancerSG
    Export:
      Name: LoadBalancerSG
  BastionHostSG:
    Description: Security Group For BastionHost
    Value: !Ref BastionHostSG
    Export:
      Name: BastionHostSG
